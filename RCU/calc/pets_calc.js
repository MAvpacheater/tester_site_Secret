// RCU PETS CALCULATOR - Fixed Version
(() => {
    let initialized = false;
    let currentLanguage = 'en';
    let multiplier = 1;

    const translations = {
        en: {
            title: "üêæ RCU Pets Calculator",
            settings: "Settings",
            inputLabel: "Base Pet Stats",
            inputPlaceholder: "Enter base stats...",
            resultLabel: "Final Stats",
            calculateBtn: "Calculate",
            shiny: "‚ú® Shiny",
            normal: "‚ö™ Normal",
            golden: "üü° Golden",
            toxic: "üü¢ Toxic",
            galaxy: "üåå Galaxy",
            errors: { invalidInput: "Please enter a valid number" }
        },
        uk: {
            title: "üêæ RCU –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ü–µ—Ç—ñ–≤",
            settings: "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
            inputLabel: "–ë–∞–∑–æ–≤—ñ –°—Ç–∞—Ç–∏ –ü–µ—Ç–∞",
            inputPlaceholder: "–í–≤–µ–¥—ñ—Ç—å –±–∞–∑–æ–≤—ñ —Å—Ç–∞—Ç–∏...",
            resultLabel: "–§—ñ–Ω–∞–ª—å–Ω—ñ –°—Ç–∞—Ç–∏",
            calculateBtn: "–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏",
            shiny: "‚ú® –°—è—é—á–∏–π",
            normal: "‚ö™ –ó–≤–∏—á–∞–π–Ω–∏–π",
            golden: "üü° –ó–æ–ª–æ—Ç–∏–π",
            toxic: "üü¢ –¢–æ–∫—Å–∏—á–Ω–∏–π",
            galaxy: "üåå –ì–∞–ª–∞–∫—Ç–∏—á–Ω–∏–π",
            errors: { invalidInput: "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–µ —á–∏—Å–ª–æ" }
        },
        ru: {
            title: "üêæ RCU –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ü–µ—Ç–æ–≤",
            settings: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            inputLabel: "–ë–∞–∑–æ–≤—ã–µ –°—Ç–∞—Ç—ã –ü–µ—Ç–∞",
            inputPlaceholder: "–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã...",
            resultLabel: "–§–∏–Ω–∞–ª—å–Ω—ã–µ –°—Ç–∞—Ç—ã",
            calculateBtn: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å",
            shiny: "‚ú® –°–∏—è—é—â–∏–π",
            normal: "‚ö™ –û–±—ã—á–Ω—ã–π",
            golden: "üü° –ó–æ–ª–æ—Ç–æ–π",
            toxic: "üü¢ –¢–æ–∫—Å–∏—á–Ω—ã–π",
            galaxy: "üåå –ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π",
            errors: { invalidInput: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ" }
        }
    };

    const rarityModifiers = {
        shiny: 1.5,
        normal: 1,
        golden: 2,
        toxic: 4,
        galaxy: 8
    };

    // –ì—Ä—É–ø–∏ –≤–∑–∞—î–º–æ–≤–∏–∫–ª—é—á–Ω–∏—Ö —Ä—ñ–¥–∫–æ—Å—Ç–µ–π
    const exclusiveGroups = {
        mainRarity: ['normal', 'golden', 'toxic', 'galaxy'] // –¢—ñ–ª—å–∫–∏ –æ–¥–Ω–∞ –∑ —Ü–∏—Ö —Ä—ñ–¥–∫–æ—Å—Ç–µ–π
    };

    const getAppLanguage = () => 
        typeof getCurrentAppLanguage === 'function' ? getCurrentAppLanguage() : localStorage.getItem('selectedLanguage') || 'en';

    const findContainer = () => {
        // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ —Ä—ñ–∑–Ω–∏–º–∏ –º–æ–∂–ª–∏–≤–∏–º–∏ ID
        const possibleIds = ['petscalcPage', 'petsCalcPage', 'petscalc-page'];
        
        for (const id of possibleIds) {
            const container = document.getElementById(id);
            if (container) {
                console.log(`‚úÖ Found container: #${id}`);
                return container;
            }
        }
        
        // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –ø–æ ID, —Å–ø—Ä–æ–±—É—î–º–æ –ø–æ –∫–ª–∞—Å—É
        const containerByClass = document.querySelector('.pets-calc-page');
        if (containerByClass) {
            console.log('‚úÖ Found container by class: .pets-calc-page');
            return containerByClass;
        }
        
        console.error('‚ùå Container not found! Tried:', possibleIds);
        return null;
    };

    const createHTML = () => {
        const page = findContainer();
        if (!page) {
            console.error('‚ùå Container not found!');
            return;
        }

        const t = translations[currentLanguage] || translations.en;
        const rarities = ['normal', 'golden', 'toxic', 'galaxy', 'shiny'];
        const mods = [1, 2, 4, 8, 1.5];

        page.innerHTML = `
            <div class="header-controls">
                <h1>${t.title}</h1>
                <button class="settings-btn" onclick="togglePetsCalcSettings()">‚öôÔ∏è</button>
            </div>
            <div class="settings-panel" id="settingsPanelPetsCalc">
                <div class="settings-title">${t.settings}</div>
                ${rarities.slice(0, 4).map((id, i) => `
                    <div class="simple-toggle">
                        <div class="toggle-info">
                            <div class="toggle-label ${id}">${t[id]}</div>
                            <div class="toggle-multiplier">(x${mods[i]})</div>
                        </div>
                        <label class="switch">
                            <input type="checkbox" id="${id}" ${i === 0 ? 'checked' : ''} onchange="handleRaritySelection('${id}')">
                            <span class="slider"></span>
                        </label>
                    </div>
                `).join('')}
                <div style="border-top: 2px solid rgba(0, 217, 255, 0.5); margin: 15px 0; padding-top: 15px;">
                    <div class="simple-toggle">
                        <div class="toggle-info">
                            <div class="toggle-label shiny">${t.shiny}</div>
                            <div class="toggle-multiplier">(x${mods[4]})</div>
                        </div>
                        <label class="switch">
                            <input type="checkbox" id="shiny" onchange="handleRaritySelection('shiny')">
                            <span class="slider"></span>
                        </label>
                    </div>
                </div>
            </div>
            <div class="input-section">
                <label class="input-label" for="petsCalcNumberInput">${t.inputLabel}</label>
                <input type="number" class="number-input" id="petsCalcNumberInput" placeholder="${t.inputPlaceholder}" step="any" oninput="calculatePetsCalcStats()">
                <button class="calculate-btn" onclick="calculatePetsCalcStats()">${t.calculateBtn}</button>
                <div class="error" id="petsCalcErrorMessage"></div>
            </div>
            <div class="result-section" id="petsCalcResultSection">
                <div class="stats-label">${t.resultLabel}</div>
                <div class="result-value" id="petsCalcResultValue">0</div>
            </div>
        `;

        console.log('‚úÖ Pets Calculator HTML created');
    };

    const addEventListeners = () => {
        document.addEventListener('languageChanged', e => {
            if (e.detail && e.detail.language) {
                updateLanguage(e.detail.language);
            }
        });
        
        setTimeout(() => {
            const input = document.getElementById('petsCalcNumberInput');
            if (input) {
                input.addEventListener('keypress', e => {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        calculate();
                    }
                });
                
                input.addEventListener('input', () => {
                    const err = document.getElementById('petsCalcErrorMessage');
                    if (err) err.textContent = '';
                });
            }
        }, 100);
    };

    const updateLanguage = lang => {
        console.log('üåç Updating Pets Calculator language to:', lang);
        currentLanguage = translations[lang] ? lang : 'en';
        createHTML();
        addEventListeners();
        updateMultiplier();
        console.log('‚úÖ Language updated to:', currentLanguage);
    };

    const toggleSettings = () => {
        const panel = document.getElementById('settingsPanelPetsCalc');
        if (panel) {
            panel.classList.toggle('show');
            console.log('‚öôÔ∏è Settings toggled:', panel.classList.contains('show') ? 'opened' : 'closed');
        } else {
            console.warn('‚ö†Ô∏è Settings panel not found');
        }
    };

    const handleSelection = selectedId => {
        console.log('üîÑ Rarity selected:', selectedId);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–±—Ä–∞–Ω–∞ —Ä—ñ–¥–∫—ñ—Å—Ç—å –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –æ—Å–Ω–æ–≤–Ω–æ—ó –≥—Ä—É–ø–∏
        const isMainRarity = exclusiveGroups.mainRarity.includes(selectedId);
        
        if (isMainRarity) {
            // –Ø–∫—â–æ –≤–∏–±—Ä–∞–ª–∏ –æ–¥–Ω—É –∑ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ä—ñ–¥–∫–æ—Å—Ç–µ–π (Normal, Golden, Toxic, Galaxy),
            // –≤–∏–º–∏–∫–∞—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ –∑ —Ü—ñ—î—ó –≥—Ä—É–ø–∏
            exclusiveGroups.mainRarity.forEach(id => {
                if (id !== selectedId) {
                    const cb = document.getElementById(id);
                    if (cb && cb.checked) {
                        cb.checked = false;
                        console.log(`‚ùå Disabled ${id} (exclusive with ${selectedId})`);
                    }
                }
            });
        }
        
        // Shiny –º–æ–∂–µ –±—É—Ç–∏ –≤–∫–ª—é—á–µ–Ω–∏–π —Ä–∞–∑–æ–º –∑ –±—É–¥—å-—è–∫–æ—é –æ—Å–Ω–æ–≤–Ω–æ—é —Ä—ñ–¥–∫—ñ—Å—Ç—é
        
        updateMultiplier();
    };

    const updateMultiplier = () => {
        multiplier = 1;
        const activeRarities = [];
        
        // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ä—ñ–¥–∫–æ—Å—Ç—ñ
        for (const id in rarityModifiers) {
            const cb = document.getElementById(id);
            if (cb?.checked) {
                activeRarities.push(id);
            }
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–±—Ä–∞–Ω–∞ —Ö–æ—á–∞ –± –æ–¥–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞ —Ä—ñ–¥–∫—ñ—Å—Ç—å
        const activeMainRarities = activeRarities.filter(id => 
            exclusiveGroups.mainRarity.includes(id)
        );
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ–º–∞—î –±—ñ–ª—å—à–µ –æ–¥–Ω—ñ—î—ó –æ—Å–Ω–æ–≤–Ω–æ—ó —Ä—ñ–¥–∫–æ—Å—Ç—ñ
        if (activeMainRarities.length > 1) {
            console.warn('‚ö†Ô∏è Multiple main rarities detected, keeping only the first one');
            // –í–∏–º–∏–∫–∞—î–º–æ –≤—Å—ñ –∫—Ä—ñ–º –ø–µ—Ä—à–æ—ó
            activeMainRarities.slice(1).forEach(id => {
                const cb = document.getElementById(id);
                if (cb) cb.checked = false;
                activeRarities.splice(activeRarities.indexOf(id), 1);
            });
        }
        
        // –Ø–∫—â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –æ—Å–Ω–æ–≤–Ω–æ—ó —Ä—ñ–¥–∫–æ—Å—Ç—ñ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Normal
        if (activeMainRarities.length === 0) {
            const normalCb = document.getElementById('normal');
            if (normalCb) {
                normalCb.checked = true;
                activeRarities.push('normal');
            }
        }
        
        // –ú–Ω–æ–∂–∏–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏
        activeRarities.forEach(id => {
            multiplier *= rarityModifiers[id];
        });
        
        console.log(`üìä Active rarities: [${activeRarities.join(', ')}] ‚Üí Multiplier: x${multiplier}`);
        
        calculate();
    };

    const calculate = () => {
        const input = document.getElementById('petsCalcNumberInput');
        const section = document.getElementById('petsCalcResultSection');
        const value = document.getElementById('petsCalcResultValue');
        const error = document.getElementById('petsCalcErrorMessage');

        if (!input || !section || !value || !error) {
            console.warn('‚ö†Ô∏è Elements not found for calculation');
            return;
        }

        const t = translations[currentLanguage] || translations.en;
        error.textContent = '';

        const base = parseFloat(input.value);

        if (isNaN(base) || !input.value.trim()) {
            if (input.value.trim()) {
                error.textContent = t.errors?.invalidInput || 'Please enter a valid number';
            }
            section.classList.remove('show');
            return;
        }

        const final = base * multiplier;
        value.textContent = final.toLocaleString('uk-UA', {
            minimumFractionDigits: final % 1 === 0 ? 0 : 2,
            maximumFractionDigits: 8
        });

        console.log(`üßÆ Calculation: ${base} x ${multiplier} = ${final}`);
        
        setTimeout(() => section.classList.add('show'), 100);
    };

    const init = () => {
        if (initialized) {
            console.warn('‚ö†Ô∏è Pets Calculator already initialized');
            return;
        }
        
        console.log('üöÄ Initializing RCU Pets Calculator...');
        
        const container = findContainer();
        if (!container) {
            console.error('‚ùå Cannot initialize - container not found');
            return;
        }
        
        currentLanguage = getAppLanguage();
        console.log('üåç Using language:', currentLanguage);
        
        createHTML();
        addEventListeners();
        updateMultiplier();
        
        initialized = true;
        console.log('‚úÖ RCU Pets Calculator fully initialized');
    };

    // Auto-init when DOM ready
    const tryInit = () => {
        const container = findContainer();
        if (container) {
            init();
        } else {
            console.log('‚è≥ Container not ready, waiting...');
        }
    };

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            console.log('üìÑ DOM ready, checking for container...');
            setTimeout(tryInit, 100);
        });
    } else {
        console.log('üìÑ DOM already loaded, checking for container...');
        setTimeout(tryInit, 100);
    }

    // Listen for page changes
    document.addEventListener('pageChanged', (e) => {
        if (e.detail && e.detail.page === 'petscalc' && !initialized) {
            console.log('üìÑ Page changed to petscalc, attempting init...');
            setTimeout(tryInit, 200);
        }
    });

    // Global exports
    window.initializePetsCalc = init;
    window.calculatePetsCalcStats = calculate;
    window.updatePetsCalcLanguage = updateLanguage;
    window.togglePetsCalcSettings = toggleSettings;
    window.handleRaritySelection = handleSelection;
    window.updatePetsCalcMultiplier = updateMultiplier;

    console.log('‚úÖ RCU Pets Calculator module loaded');
})();
